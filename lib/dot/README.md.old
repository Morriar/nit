# `dot` - Dot rendering library

 * [`DotGraph` - A Graph representation suited for dot format.](#`DotGraph`---A-Graph-representation-suited-for-dot-format.)
 * [`DotNode` - A dot node](#`DotNode`---A-dot-node)
 * [`DotEdge` - A dot edge that links two nodes](#`DotEdge`---A-dot-edge-that-links-two-nodes)
 * [`DotCluster` - A dot cluster allows nested nodes](#`DotCluster`---A-dot-cluster-allows-nested-nodes)
 * [Other classes from `dot`](#Other-classes-from-`dot`)
 * [Authors](#Authors)

Example:

~~~
import dot

var graph = new DotGraph("G", "digraph")

var hello = graph.add_node("hello")
var world = graph.add_node("world")

graph.add_edge(hello, world)

print graph.to_dot
~~~

## `DotGraph` - A Graph representation suited for dot format.

Creating a new graph

~~~
var graph = new DotGraph("G", "digraph")
graph["rankdir"] = "BT"
graph["ranksep"] = 0.3
graph["nodesep"] = 0.3
graph.nodes_attrs["fontname"] = "helvetica"
graph.edges_attrs["color"] = "gray"
~~~

Properties:

* `add` - Add a node to the graph
* `add_edge` - Add an edge to the graph
* `add_node` - Add a new node to the graph
* `show` - Show dot in graphviz (blocking)
* `to_svg` - Render `self` as an SVG image

## `DotNode` - A dot node

Nodes can be created from scratch

~~~
var node = new DotNode("id")
node["label"] = "ID"
~~~

Then added to a graph

~~~
var graph = new DotGraph("G", "digraph")
graph.add node
~~~

Or can be created directly from an existing graph

~~~
var node2 = graph.add_node("id2")
node2["label"] = "ID2"
~~~

## `DotEdge` - A dot edge that links two nodes

Edges can be created from scratch

~~~
var a1 = new DotNode("a1")
var b1 = new DotNode("b1")
var edge = new DotEdge(a1, b1)
edge["color"] = "blue"
~~~

Then added to a graph

~~~
sh var graph = new DotGraph("G", "digraph")
graph.add edge
~~~

Or can be created directly from an existing graph

~~~
var a2 = graph.add_node("a2")
var b2 = graph.add_node("b2")
var edge2 = graph.add_edge(a2, b2)
edge2["color"] = "red"
~~~

## `DotCluster` - A dot cluster allows nested nodes

Creating clusters

~~~
var graph = new DotGraph("G", "digraph")
graph["rankdir"] = "BT"

var sub = new DotCluster("cluster_sub", "subgraph")
sub["label"] = "process #1"

var a0 = sub.add_node("a0")
var a1 = sub.add_node("a1")
sub.add_edge(a0, a1)

graph.add sub
~~~

## Other classes from `dot`

* `AttributeMap` - Map of graph/node/edge attribute that can be rendered to dot.
* `DotElement` - Something that can be rendered in dot format.

## Authors

This project is maintained by **Alexandre Terrasa <alexandre@moz-code.org>**.
