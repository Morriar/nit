# `jvm` - Java Virtual Machine invocation API and others services from the JNI C API

 * [`JavaVMBuilder` - Utility to select options to create the VM using `create_jvm`](#`JavaVMBuilder`---Utility-to-select-options-to-create-the-VM-using-`create_jvm`)
 * [Other classes from `jvm`](#Other-classes-from-`jvm`)
 * [Authors](#Authors)

Users of this module and the Java FFI, on desktop computers, must define three environment variables:

* `JAVA_HOME` points to the installation folder of the target Java VM.
  This folder should contain the JNI header file `include/jni.h`.
  e.g. `/usr/lib/jvm/default-java` on Debian Jessie.
* `JNI_LIB_PATH` points to the folder with `libjvm.so`.
  e.g. `/usr/lib/jvm/default-java/jre/lib/amd64/server/` on Debian Jessie.
* `LD_LIBRARY_PATH` has the path to the folder with `libjvm.so`.
  It's the same value as `JNI_LIB_PATH` but `LD_LIBRARY_PATH` is a colon separated list
  which may contain other paths.

See: http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/jniTOC.html

## `JavaVMBuilder` - Utility to select options to create the VM using `create_jvm`

Usage example:

~~~~nitish
var builder = new JavaVMBuilder
builder.options.add "-Djava.class.path=."
var jvm = builder.create_jvm
var env = builder.jni_env
~~~~

Properties:

* `create_jvm` - Create a JVM instance, or return `null` on error

## Other classes from `jvm`

* `JClass` - Represents a jni jclass
* `JFieldID` - Represents a jni jfieldID
* `JMethodID` - Represents a jni jmethodID
* `JNINativeMethod` - Represents a jni JNINNativeMethod
* `JValue` - Reprents a jni jvalue
* `JavaObject` - Represens a jni jobject
* `JavaVM` - Represents a jni JavaVM
* `JniEnv` - Represents a jni JNIEnv, which is a thread in a JavaVM

## Authors

This project is maintained by **Alexis Laferri√®re <alexis.laf@xymus.net>**.
