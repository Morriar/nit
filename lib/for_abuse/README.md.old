# `for_abuse` - Service management through the `for` control structure.

 * [`ForAbuser` - Encapsulation of service in a `for`-compatible interface.](#`ForAbuser`---Encapsulation-of-service-in-a-`for`-compatible-interface.)
 * [`CompareQuery` - A comparison query.](#`CompareQuery`---A-comparison-query.)
 * [Authors](#Authors)

The module is a proof-of-concept to investigate the abuse of
the `for` structure to implement various services.

The idea is that, with a `for`, the service-provider can:

* control the end of the service (thus can finalize things
  like releasing ressources)
* communicate data with the user on each iteration; the used can
  also communicate results to the provider.

## `ForAbuser` - Encapsulation of service in a `for`-compatible interface.

The service is not effectively started until the iterate method
is called. Then, each step of the iteration is a step in the service.

While, for a typing point of view, abusers are just classes with an
iterator method, the point of this class is to tag services that return
a ForAbuser object.

Note that using having `ForAbuser` as a genuine subclass of `Collection`
works but is not recommended since it may cause mental health issues.

Properties:

* `iterator` - Starts and control the service

## `CompareQuery` - A comparison query.

* if `a < b` then the user sets `res` to -1
* if `a > b` then the user sets `res` to 1
* if `a == b` then the user sets `res` to 0

It is the responsibility of the user to implement a total order.
ie. the implemented comparison must be asymmetric, transitive and total.

## Authors

This project is maintained by **Jean Privat <jean@pryen.org>**.
