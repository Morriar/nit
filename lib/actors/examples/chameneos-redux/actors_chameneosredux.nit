		# This file is generated by nitactors (threaded version)
		# Do not modify, instead use the generated services.
		module actors_chameneosredux is
	no_warning("missing-doc")
end

import chameneosredux

####################### Redef classes #########################
redef class Creature
redef var async is lazy do return new ProxyCreature.proxy(self)
end



####################### Actor classes #########################
class ActorCreature
	super Actor
	redef type E: nullable Creature
end



####################### Messages classes ######################
class MessageCreature
	super Message
	redef type E: Creature
end



class CreatureMessageplace
	super MessageCreature

	var ret = new Future[MeetingPlace]

	redef fun invoke(instance) do ret.set_value(instance.place)
end



class CreatureMessagecolor
	super MessageCreature

	var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.color)
end



class CreatureMessageid
	super MessageCreature

	var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.id)
end



class CreatureMessagecount
	super MessageCreature

	var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.count)
end



class CreatureMessagesamecount
	super MessageCreature

	var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.samecount)
end



class CreatureMessagerun
	super MessageCreature

	

	redef fun invoke(instance) do instance.run
end



class CreatureMessageto_string
	super MessageCreature

	var ret = new Future[String]

	redef fun invoke(instance) do ret.set_value(instance.to_string)
end



####################### Proxy classes #########################
redef class ProxyCreature

	redef type E: ActorCreature
	#var actor: ActorCreature is noinit

	init proxy(base_class: Creature) do
		actor = new ActorCreature(base_class)
		actor.start
	end

	redef fun place: Future[MeetingPlace] do
	var msg = new CreatureMessageplace
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun color: Future[Int] do
	var msg = new CreatureMessagecolor
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun id: Future[Int] do
	var msg = new CreatureMessageid
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun count: Future[Int] do
	var msg = new CreatureMessagecount
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun samecount: Future[Int] do
	var msg = new CreatureMessagesamecount
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun run do
	var msg = new CreatureMessagerun
	actor.mailbox.push(msg)
	
end


redef fun to_string: Future[String] do
	var msg = new CreatureMessageto_string
	actor.mailbox.push(msg)
	return msg.ret
end

end



