		# This file is generated by nitactors (threaded version)
		# Do not modify, instead use the generated services.
		module actors_mandelbrot is
	no_warning("missing-doc")
end

import mandelbrot

####################### Redef classes #########################
redef class Worker
redef var async is lazy do return new ProxyWorker.proxy(self)
end



####################### Actor classes #########################
class ActorWorker
	super Actor
	redef type E: nullable Worker
end



####################### Messages classes ######################
class MessageWorker
	super Message
	redef type E: Worker
end



class WorkerMessageget_byte
	super MessageWorker

	var x: Int
var y: Int
var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.get_byte(x, y))
end



class WorkerMessageput_line
	super MessageWorker

	var y: Int
var line: Array[Byte]

	redef fun invoke(instance) do instance.put_line(y, line)
end



class WorkerMessagework
	super MessageWorker

	

	redef fun invoke(instance) do instance.work
end



####################### Proxy classes #########################
redef class ProxyWorker

	redef type E: ActorWorker
	#var actor: ActorWorker is noinit

	init proxy(base_class: Worker) do
		actor = new ActorWorker(base_class)
		actor.start
	end

	redef fun get_byte(x: Int, y: Int): Future[Int] do
	var msg = new WorkerMessageget_byte(x, y)
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun put_line(y: Int, line: Array[Byte]) do
	var msg = new WorkerMessageput_line(y, line)
	actor.mailbox.push(msg)
	
end


redef fun work do
	var msg = new WorkerMessagework
	actor.mailbox.push(msg)
	
end

end



