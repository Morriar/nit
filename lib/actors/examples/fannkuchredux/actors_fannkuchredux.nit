		# This file is generated by nitactors (threaded version)
		# Do not modify, instead use the generated services.
		module actors_fannkuchredux is
	no_warning("missing-doc")
end

import fannkuchredux

####################### Redef classes #########################
redef class FannkuchRedux
redef var async is lazy do return new ProxyFannkuchRedux.proxy(self)
end



####################### Actor classes #########################
class ActorFannkuchRedux
	super Actor
	redef type E: nullable FannkuchRedux
end



####################### Messages classes ######################
class MessageFannkuchRedux
	super Message
	redef type E: FannkuchRedux
end



class FannkuchReduxMessagep
	super MessageFannkuchRedux

	var ret = new Future[Array[Int]]

	redef fun invoke(instance) do ret.set_value(instance.p)
end



class FannkuchReduxMessagepp
	super MessageFannkuchRedux

	var ret = new Future[Array[Int]]

	redef fun invoke(instance) do ret.set_value(instance.pp)
end



class FannkuchReduxMessagecount
	super MessageFannkuchRedux

	var ret = new Future[Array[Int]]

	redef fun invoke(instance) do ret.set_value(instance.count)
end



class FannkuchReduxMessageprint_p
	super MessageFannkuchRedux

	

	redef fun invoke(instance) do instance.print_p
end



class FannkuchReduxMessagefirst_permutation
	super MessageFannkuchRedux

	var idx: Int

	redef fun invoke(instance) do instance.first_permutation(idx)
end



class FannkuchReduxMessagenext_permutation
	super MessageFannkuchRedux

	

	redef fun invoke(instance) do instance.next_permutation
end



class FannkuchReduxMessagecount_flips
	super MessageFannkuchRedux

	var ret = new Future[Int]

	redef fun invoke(instance) do ret.set_value(instance.count_flips)
end



class FannkuchReduxMessagerun_task
	super MessageFannkuchRedux

	var task: Int

	redef fun invoke(instance) do instance.run_task(task)
end



class FannkuchReduxMessagerun
	super MessageFannkuchRedux

	

	redef fun invoke(instance) do instance.run
end



####################### Proxy classes #########################
redef class ProxyFannkuchRedux

	redef type E: ActorFannkuchRedux
	#var actor: ActorFannkuchRedux is noinit

	init proxy(base_class: FannkuchRedux) do
		actor = new ActorFannkuchRedux(base_class)
		actor.start
	end

	redef fun p: Future[Array[Int]] do
	var msg = new FannkuchReduxMessagep
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun pp: Future[Array[Int]] do
	var msg = new FannkuchReduxMessagepp
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun count: Future[Array[Int]] do
	var msg = new FannkuchReduxMessagecount
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun print_p do
	var msg = new FannkuchReduxMessageprint_p
	actor.mailbox.push(msg)
	
end


redef fun first_permutation(idx: Int) do
	var msg = new FannkuchReduxMessagefirst_permutation(idx)
	actor.mailbox.push(msg)
	
end


redef fun next_permutation do
	var msg = new FannkuchReduxMessagenext_permutation
	actor.mailbox.push(msg)
	
end


redef fun count_flips: Future[Int] do
	var msg = new FannkuchReduxMessagecount_flips
	actor.mailbox.push(msg)
	return msg.ret
end


redef fun run_task(task: Int) do
	var msg = new FannkuchReduxMessagerun_task(task)
	actor.mailbox.push(msg)
	
end


redef fun run do
	var msg = new FannkuchReduxMessagerun
	actor.mailbox.push(msg)
	
end

end



