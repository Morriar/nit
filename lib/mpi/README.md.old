# `mpi` - Implementation of the Message Passing Interface protocol by wrapping OpenMPI

 * [`Op` - An MPI operation](#`Op`---An-MPI-operation)
 * [`Sendable` - Something sendable directly and efficiently over MPI](#`Sendable`---Something-sendable-directly-and-efficiently-over-MPI)
 * [`Receptacle` - Something which can receive data directly and efficiently from MPI](#`Receptacle`---Something-which-can-receive-data-directly-and-efficiently-from-MPI)
 * [Other classes from `mpi`](#Other-classes-from-`mpi`)
 * [Authors](#Authors)

OpenMPI is used only at linking and for it's `mpi.h`. Other implementations
could be used without much modification.

Supports transfer of any valid `Serializable` instances as well as basic
C arrays defined in module `c`. Using C arrays is encouraged when performance
is critical.

Since this module is a thin wrapper around OpenMPI, in case of missing
documentation, you can refer to https://www.open-mpi.org/doc/v1.8/.

## `Op` - An MPI operation

Used with the `reduce` method.

See <http://www.mpi-forum.org/docs/mpi-1.1/mpi-11-html/node78.html>

Properties:

* `band` - Get a MPI bit-wise and operation.
* `bor` - Get a MPI bit-wise or operation.
* `bxor` - Get a MPI bit-wise xor operation.
* `land` - Get a MPI logical and operation.
* `lor` - Get a MPI logical or operation.
* `lxor` - Get a MPI logical xor operation.
* `max` - Get a MPI maximum operation.
* `maxloc` - Get a MPI maxloc operation.
* `min` - Get a MPI minimum operation.
* `minloc` - Get a MPI minloc operation.
* `op_null` - Get a MPI null operation.
* `prod` - Get a MPI product operation.
* `replace` - Get a MPI replace operation.
* `sum` - Get a MPI sum operation.

## `Sendable` - Something sendable directly and efficiently over MPI

Subclasses of `Sendable` should use the native MPI send function, without
using Nit serialization.

## `Receptacle` - Something which can receive data directly and efficiently from MPI

Subclasses of `Receptacle` should use the native MPI recveive function,
without using Nit serialization.

## Other classes from `mpi`

* `Comm` - An MPI communicator
* `DataType` - An MPI data type
* `ErrorClass` - An MPI error class
* `MPI` - Handle to most MPI services
* `Rank` - An MPI rank within a communcator
* `Status` - Status of a communication used by `MPI::probe`
* `SuccessOrError` - An MPI return code to report success or errors
* `Tag` - An MPI tag, can be defined using `Int::tag`

## Authors

This project is maintained by **Alexis Laferri√®re <alexis.laf@xymus.net>**.
