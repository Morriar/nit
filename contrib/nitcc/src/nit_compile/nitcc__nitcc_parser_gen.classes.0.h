#include "nit.common.h"
extern const struct class class_core__Int;
extern const struct class class_core__Char;
extern const struct class class_core__Bool;
extern const struct type type_core__Int;
extern const struct type type_core__Char;
extern const struct type type_core__Bool;
void core___core__Object___init(val* self);
short int core___core__Object____33d_61d(val* self, val* p0);
val* core___core__Object___sys(val* self);
val* core__abstract_text___Object___to_s(val* self);
short int core___core__Object____61d_61d(val* self, val* p0);
short int core___core__Object___is_same_instance(val* self, val* p0);
val* core__abstract_text___Object___inspect(val* self);
long core___core__Object___object_id(val* self);
val* core__abstract_text___Object___inspect_head(val* self);
long core___core__Object___hash(val* self);
val* core__abstract_text___Object___class_name(val* self);
char* core__abstract_text___Object___native_class_name(val* self);
val* nitcc___nitcc__Gram___prods(val* self);
val* nitcc___nitcc__Gram___tokens(val* self);
val* nitcc___nitcc__Gram___lr0(val* self);
void nitcc___nitcc__Gram___analyse(val* self);
short int nitcc___nitcc__Gram___try_add(val* self, val* p0, val* p1);
val* nitcc___nitcc__Gram___ast_prods(val* self);
extern const struct class class_nitcc__Gram;
val* NEW_core__Array(const struct type* type);
extern const struct type type_core__Array__nitcc__Production;
extern const int COLOR_core__kernel__Object__init;
extern const int COLOR_nitcc__grammar__Gram___prods;
extern const int COLOR_nitcc__grammar__Gram___ast_prods;
extern const struct type type_core__Array__nitcc__Token;
extern const int COLOR_nitcc__grammar__Gram___tokens;
void nitcc___nitcc__Element___core__kernel__Object__init(val* self);
val* nitcc___nitcc__Element___core__abstract_text__Object__to_s(val* self);
void nitcc___nitcc__Element___name_61d(val* self, val* p0);
val* nitcc___nitcc__Element___name(val* self);
val* nitcc___nitcc__Element___cname(val* self);
val* nitcc___nitcc__Production___Element__acname(val* self);
val* nitcc___nitcc__Element___acname_cache(val* self);
void nitcc___nitcc__Element___acname_cache_61d(val* self, val* p0);
val* nitcc___nitcc__Production___new_alt(val* self, val* p0, val* p1);
val* nitcc___nitcc__Production___new_alt0(val* self, val* p0);
val* nitcc___nitcc__Production___alts(val* self);
void nitcc___nitcc__Production___accept_61d(val* self, short int p0);
val* nitcc___nitcc__Production___start_state(val* self);
short int nitcc___nitcc__Production___is_nullable(val* self);
void nitcc___nitcc__Production___is_nullable_61d(val* self, short int p0);
val* nitcc___nitcc__Production___firsts(val* self);
val* nitcc___nitcc__Production___afters(val* self);
short int nitcc___nitcc__Production___accept(val* self);
val* nitcc___nitcc__Production___gotos(val* self);
val* nitcc___nitcc__Production___spe(val* self);
short int nitcc___nitcc__Production___altone(val* self);
val* nitcc___nitcc__Production___ast_alts(val* self);
val* nitcc___nitcc__Element___acname(val* self);
extern const struct class class_nitcc__Production;
extern const struct type type_core__Array__nitcc__Alternative;
extern const int COLOR_nitcc__grammar__Production___alts;
extern const int COLOR_nitcc__grammar__Production___ast_alts;
extern const int COLOR_nitcc__grammar__Production___accept;
extern const int COLOR_nitcc__grammar__Production___altone;
extern const int COLOR_nitcc__grammar__Production___is_nullable;
val* NEW_core__HashSet(const struct type* type);
extern const struct type type_core__HashSet__nitcc__Item;
extern const int COLOR_nitcc__grammar__Production___firsts;
extern const int COLOR_nitcc__grammar__Production___afters;
val* NEW_core__ArraySet(const struct type* type);
extern const struct type type_core__ArraySet__nitcc__LRState;
extern const int COLOR_nitcc__grammar__Production___gotos;
void nitcc___nitcc__Alternative___core__kernel__Object__init(val* self);
val* nitcc___nitcc__Alternative___core__abstract_text__Object__to_s(val* self);
void nitcc___nitcc__Alternative___phony_61d(val* self, short int p0);
void nitcc___nitcc__Alternative___prod_61d(val* self, val* p0);
void nitcc___nitcc__Alternative___name_61d(val* self, val* p0);
void nitcc___nitcc__Alternative___elems_61d(val* self, val* p0);
val* nitcc___nitcc__Alternative___prod(val* self);
val* nitcc___nitcc__Alternative___name(val* self);
val* nitcc___nitcc__Alternative___elems(val* self);
short int nitcc___nitcc__Alternative___phony(val* self);
val* nitcc___nitcc__Alternative___first_item(val* self);
val* nitcc___nitcc__Alternative___cname(val* self);
short int nitcc___nitcc__Alternative___trans(val* self);
val* nitcc___nitcc__Alternative___elemname(val* self, long p0);
void nitcc___nitcc__Alternative___make_codes(val* self);
val* nitcc___nitcc__Alternative___codes(val* self);
val* nitcc___nitcc__Alternative___elems_names(val* self);
void nitcc___nitcc__Alternative___codes_61d(val* self, val* p0);
extern const struct class class_nitcc__Alternative;
val* NEW_nitcc__Item(const struct type* type);
extern const struct type type_nitcc__Item;
extern const int COLOR_nitcc__grammar__Item__alt_61d;
extern const int COLOR_nitcc__grammar__Item__pos_61d;
extern const int COLOR_nitcc__grammar__Alternative___first_item;
extern const struct type type_core__Array__nullable__core__String;
extern const int COLOR_nitcc__grammar__Alternative___elems_names;
extern const int COLOR_nitcc__grammar__Alternative___trans;
extern const int COLOR_nitcc__grammar__Alternative___phony;
val* nitcc___nitcc__CodePop___core__abstract_text__Object__to_s(val* self);
extern const struct class class_nitcc__CodePop;
void nitcc___nitcc__CodeNew___core__kernel__Object__init(val* self);
val* nitcc___nitcc__CodeNew___core__abstract_text__Object__to_s(val* self);
val* nitcc___nitcc__CodeNew___alt(val* self);
void nitcc___nitcc__CodeNew___alt_61d(val* self, val* p0);
extern const struct class class_nitcc__CodeNew;
val* nitcc___nitcc__Token___reduces(val* self);
val* nitcc___nitcc__Token___shifts(val* self);
extern const struct class class_nitcc__Token;
extern const int COLOR_nitcc__grammar__Token___shifts;
extern const int COLOR_nitcc__grammar__Token___reduces;
void nitcc___nitcc__LRAutomaton___core__kernel__Object__init(val* self);
val* nitcc___nitcc__LRAutomaton___states(val* self);
void nitcc___nitcc__LRAutomaton___to_dot(val* self, val* p0);
void nitcc___nitcc__LRAutomaton___gen_to_nit(val* self, val* p0, val* p1);
void nitcc___nitcc__LRAutomaton___grammar_61d(val* self, val* p0);
val* nitcc___nitcc__LRAutomaton___grammar(val* self);
extern const struct class class_nitcc__LRAutomaton;
extern const struct type type_core__Array__nitcc__LRState;
extern const int COLOR_nitcc__grammar__LRAutomaton___states;
void nitcc__grammar___nitcc__grammar__Generator___gen_to_nit(val* self, val* p0, val* p1);
val* nitcc__grammar___nitcc__grammar__Generator___out(val* self);
void nitcc__grammar___nitcc__grammar__Generator___add(val* self, val* p0);
void nitcc__grammar___nitcc__grammar__Generator___gen_reduce_to_nit(val* self, val* p0);
void nitcc__grammar___nitcc__grammar__Generator___gen_shift_to_nit(val* self, val* p0, val* p1);
void nitcc__grammar___nitcc__grammar__Generator___gen_goto_to_nit(val* self, val* p0, val* p1);
extern const struct class class_nitcc__grammar__Generator;
extern const struct type type_core__Array__core__String;
extern const int COLOR_nitcc__grammar__Generator___out;
void nitcc___nitcc__LRState___core__kernel__Object__init(val* self);
val* nitcc___nitcc__LRState___core__abstract_text__Object__to_s(val* self);
short int nitcc___nitcc__LRState___core__kernel__Object___61d_61d(val* self, val* p0);
long nitcc___nitcc__LRState___core__kernel__Object__hash(val* self);
val* nitcc___nitcc__LRState___name(val* self);
void nitcc___nitcc__LRState___name_61d(val* self, val* p0);
void nitcc___nitcc__LRState___number_61d(val* self, long p0);
short int nitcc___nitcc__LRState___add(val* self, val* p0);
void nitcc___nitcc__LRState___analysis(val* self);
val* nitcc___nitcc__LRState___items(val* self);
val* nitcc___nitcc__LRState___outs(val* self);
val* nitcc___nitcc__LRState___ins(val* self);
long nitcc___nitcc__LRState___number(val* self);
val* nitcc___nitcc__LRState___core(val* self);
short int nitcc___nitcc__LRState___is_lr0(val* self);
val* nitcc___nitcc__LRState___guarded_reduce(val* self);
val* nitcc___nitcc__LRState___shifts(val* self);
void nitcc___nitcc__LRState___extends(val* self, val* p0);
val* nitcc___nitcc__LRState___reduces(val* self);
val* nitcc___nitcc__LRState___lookahead(val* self, val* p0);
val* nitcc___nitcc__LRState___guarded_shift(val* self);
val* nitcc___nitcc__LRState___gotos(val* self);
val* nitcc___nitcc__LRState___conflicting_items(val* self);
val* nitcc___nitcc__LRState___back_expand(val* self, val* p0);
val* nitcc___nitcc__LRState___cname(val* self);
short int nitcc___nitcc__LRState___need_guard(val* self);
val* nitcc___nitcc__LRState___trans(val* self, val* p0);
extern const struct class class_nitcc__LRState;
extern const int COLOR_nitcc__grammar__LRState___number;
extern const int COLOR_nitcc__grammar__LRState___items;
extern const int COLOR_nitcc__grammar__LRState___core;
extern const struct type type_core__Array__nitcc__LRTransition;
extern const int COLOR_nitcc__grammar__LRState___ins;
extern const int COLOR_nitcc__grammar__LRState___outs;
extern const struct type type_core__ArraySet__nitcc__Alternative;
extern const int COLOR_nitcc__grammar__LRState___reduces;
extern const struct type type_core__ArraySet__nitcc__Token;
extern const int COLOR_nitcc__grammar__LRState___shifts;
extern const struct type type_core__ArraySet__nitcc__Production;
extern const int COLOR_nitcc__grammar__LRState___gotos;
val* NEW_core__HashMap(const struct type* type);
extern const struct type type_core__HashMap__nitcc__Token__core__Set__nitcc__Item;
extern const int COLOR_nitcc__grammar__LRState___guarded_reduce;
extern const int COLOR_nitcc__grammar__LRState___guarded_shift;
extern const struct type type_core__ArraySet__nitcc__Item;
extern const int COLOR_nitcc__grammar__LRState___conflicting_items;
void nitcc___nitcc__LRTransition___core__kernel__Object__init(val* self);
void nitcc___nitcc__LRTransition___from_61d(val* self, val* p0);
void nitcc___nitcc__LRTransition___to_61d(val* self, val* p0);
void nitcc___nitcc__LRTransition___elem_61d(val* self, val* p0);
val* nitcc___nitcc__LRTransition___to(val* self);
val* nitcc___nitcc__LRTransition___elem(val* self);
extern const struct class class_nitcc__LRTransition;
void nitcc___nitcc__Item___core__kernel__Object__init(val* self);
val* nitcc___nitcc__Item___core__abstract_text__Object__to_s(val* self);
short int nitcc___nitcc__Item___core__kernel__Object___61d_61d(val* self, val* p0);
long nitcc___nitcc__Item___core__kernel__Object__hash(val* self);
void nitcc___nitcc__Item___alt_61d(val* self, val* p0);
void nitcc___nitcc__Item___pos_61d(val* self, long p0);
val* nitcc___nitcc__Item___next(val* self);
val* nitcc___nitcc__Item___avance(val* self);
val* nitcc___nitcc__Item___alt(val* self);
long nitcc___nitcc__Item___pos(val* self);
extern const struct class class_nitcc__Item;
void core__ropes___core__ropes__Concat___core__kernel__Object__init(val* self);
val* core___core__String___Object__to_s(val* self);
short int core___core__Text___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__Text___core__kernel__Object__hash(val* self);
short int core___core__Comparable____60d_61d(val* self, val* p0);
short int core___core__Comparable____62d(val* self, val* p0);
short int core___core__Comparable____62d_61d(val* self, val* p0);
short int core___core__Text___core__kernel__Comparable___60d(val* self, val* p0);
val* core___core__Pattern___split_in(val* self, val* p0);
val* core__string_search___Text___Pattern__search_in(val* self, val* p0, long p1);
long core__string_search___Text___Pattern__search_index_in(val* self, val* p0, long p1);
long core__fixed_ints_text___Text___to_i(val* self);
char* core__ropes___core__ropes__Concat___core__abstract_text__Text__to_cstring(val* self);
long core__ropes___core__ropes__Concat___core__abstract_text__Text__length(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__chars(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__substring(val* self, long p0, long p1);
short int core__fixed_ints_text___Text___is_int(val* self);
val* core__string_search___Text___remove_all(val* self, val* p0);
uint32_t core__ropes___core__ropes__Concat___core__abstract_text__Text___91d_93d(val* self, long p0);
val* core___core__Text___substring_from(val* self, long p0);
long core___core__Text___to_hex(val* self, val* p0, val* p1);
long core___core__Text___to_oct(val* self);
long core___core__Text___to_bin(val* self);
long core___core__Text___to_dec(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text___43d(val* self, val* p0);
long core__ropes___core__ropes__Concat___core__abstract_text__Text__byte_length(val* self);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__substrings(val* self);
val* core___core__Text___to_cmangle(val* self);
val* core___core__Text___escape_to_dot(val* self);
void core__file___Text___write_native_to(val* self, val* p0);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text___42d(val* self, long p0);
val* core__fixed_ints_text___Text___strip_numhead(val* self);
val* core__fixed_ints_text___Text___get_numhead(val* self);
short int core___core__Text___is_hex(val* self);
short int core___core__Text___is_bin(val* self);
short int core___core__Text___is_oct(val* self);
short int core___core__Text___is_dec(val* self);
val* core__string_search___Text___split(val* self, val* p0);
val* core__ropes___core__ropes__Concat___core__abstract_text__Text__empty(val* self);
long core___core__Text___a_to(val* self, long p0);
short int core__ropes___core__ropes__Concat___core__abstract_text__Text__is_empty(val* self);
val* core___core__Text___escape_more_to_c(val* self, val* p0);
val* core___core__Text___escape_to_nit(val* self);
short int core___core__Text___has_suffix(val* self, val* p0);
val* core___core__Text___hash_cache(val* self);
void core___core__Text___hash_cache_61d(val* self, val* p0);
val* core___core__Text___escape_to_c(val* self);
short int core___core__Text___has_substring(val* self, val* p0, long p1);
val* core__environ___String___environ(val* self);
void core__ropes___core__ropes__Concat___left_61d(val* self, val* p0);
void core__ropes___core__ropes__Concat___right_61d(val* self, val* p0);
val* core__ropes___core__ropes__Concat___get_leaf_at(val* self, long p0);
extern const struct class class_core__ropes__Concat;
void core__ropes___core__ropes__RopeCharIteratorPiece___core__kernel__Object__init(val* self);
val* core__ropes___core__ropes__RopeCharIteratorPiece___prev(val* self);
val* core__ropes___core__ropes__RopeCharIteratorPiece___node(val* self);
void core__ropes___core__ropes__RopeCharIteratorPiece___ldone_61d(val* self, short int p0);
void core__ropes___core__ropes__RopeCharIteratorPiece___rdone_61d(val* self, short int p0);
short int core__ropes___core__ropes__RopeCharIteratorPiece___ldone(val* self);
void core__ropes___core__ropes__RopeCharIteratorPiece___node_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeCharIteratorPiece___prev_61d(val* self, val* p0);
short int core__ropes___core__ropes__RopeCharIteratorPiece___rdone(val* self);
extern const struct class class_core__ropes__RopeCharIteratorPiece;
val* VIRTUAL_core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
val* core___core__Iterator___iterator(val* self);
void core___core__Iterator___finish(val* self);
long core__ropes___core__ropes__RopeCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__ropes___core__ropes__RopeCharIterator___from(val* self, val* p0, long p1);
val* core__ropes___core__ropes__RopeCharIterator___str(val* self);
long core__ropes___core__ropes__RopeCharIterator___pns(val* self);
void core__ropes___core__ropes__RopeCharIterator___pns_61d(val* self, long p0);
void core__ropes___core__ropes__RopeCharIterator___pos_61d(val* self, long p0);
long core__ropes___core__ropes__RopeCharIterator___pos(val* self);
val* core__ropes___core__ropes__RopeCharIterator___subs(val* self);
void core__ropes___core__ropes__RopeCharIterator___str_61d(val* self, val* p0);
long core__ropes___core__ropes__RopeCharIterator___max(val* self);
void core__ropes___core__ropes__RopeCharIterator___subs_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeCharIterator___max_61d(val* self, long p0);
extern const struct class class_core__ropes__RopeCharIterator;
val* core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__item(val* self);
void core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__next(val* self);
short int core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__Iterator__is_ok(val* self);
long core__ropes___core__ropes__RopeSubstrings___core__abstract_collection__IndexedIterator__index(val* self);
void core__ropes___core__ropes__RopeSubstrings___from(val* self, val* p0, long p1);
val* core__ropes___core__ropes__RopeSubstrings___str(val* self);
void core__ropes___core__ropes__RopeSubstrings___pos_61d(val* self, long p0);
long core__ropes___core__ropes__RopeSubstrings___pos(val* self);
long core__ropes___core__ropes__RopeSubstrings___max(val* self);
val* core__ropes___core__ropes__RopeSubstrings___iter(val* self);
void core__ropes___core__ropes__RopeSubstrings___str_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeSubstrings___iter_61d(val* self, val* p0);
void core__ropes___core__ropes__RopeSubstrings___max_61d(val* self, long p0);
extern const struct class class_core__ropes__RopeSubstrings;
void core__abstract_text___core__abstract_text__StringCharView___core__kernel__Object__init(val* self);
val* core__abstract_text___Collection___Object__to_s(val* self);
short int core___core__SequenceRead___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__SequenceRead___core__kernel__Object__hash(val* self);
void core__abstract_text___core__abstract_text__StringCharView___target_61d(val* self, val* p0);
val* core__abstract_text___core__abstract_text__StringCharView___target(val* self);
val* core__abstract_text___Collection___join(val* self, val* p0, val* p1);
long core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__length(val* self);
short int core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__is_empty(val* self);
val* core__abstract_text___core__abstract_text__StringCharView___core__abstract_collection__Collection__iterator(val* self);
short int core___core__Collection___has_all(val* self, val* p0);
short int core___core__Collection___has(val* self, val* p0);
val* core___core__SequenceRead___Collection__first(val* self);
val* core__array___Collection___to_a(val* self);
val* VIRTUAL_core__ropes___core__ropes__RopeChars___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__ropes___core__ropes__RopeChars___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
long core___core__SequenceRead___index_of(val* self, val* p0);
val* core___core__SequenceRead___last(val* self);
long core___core__SequenceRead___index_of_from(val* self, val* p0, long p1);
extern const struct class class_core__ropes__RopeChars;
void core__flat___core__flat__FlatSubstringsIter___core__kernel__Object__init(val* self);
val* core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatSubstringsIter___core__abstract_collection__Iterator__is_ok(val* self);
void core__flat___core__flat__FlatSubstringsIter___tgt_61d(val* self, val* p0);
val* core__flat___core__flat__FlatSubstringsIter___tgt(val* self);
extern const struct class class_core__flat__FlatSubstringsIter;
short int core___core__FlatString___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__FlatString___core__kernel__Object__hash(val* self);
short int core___core__FlatString___core__kernel__Comparable___60d(val* self, val* p0);
char* core___core__FlatString___core__abstract_text__Text__to_cstring(val* self);
long core___core__FlatText___Text__length(val* self);
val* core___core__FlatString___core__abstract_text__Text__chars(val* self);
val* core___core__FlatString___core__abstract_text__Text__substring(val* self, long p0, long p1);
uint32_t core__flat___FlatText___core__abstract_text__Text___91d_93d(val* self, long p0);
long core__flat___FlatText___core__abstract_text__Text__to_hex(val* self, val* p0, val* p1);
val* core__ropes___FlatString___core__abstract_text__Text___43d(val* self, val* p0);
long core___core__FlatText___Text__byte_length(val* self);
val* core___core__FlatString___core__abstract_text__Text__substrings(val* self);
void core__file___FlatString___Text__write_native_to(val* self, val* p0);
val* core___core__FlatString___core__abstract_text__Text___42d(val* self, long p0);
val* core___core__FlatString___core__abstract_text__Text__empty(val* self);
short int core___core__Text___is_empty(val* self);
val* core__flat___FlatText___core__abstract_text__Text__escape_to_c(val* self);
char* core___core__FlatText___items(val* self);
long core___core__FlatString___FlatText__first_byte(val* self);
uint32_t core__flat___FlatText___fetch_char_at(val* self, long p0);
long core__flat___FlatText___char_to_byte_index(val* self, long p0);
long core__flat___FlatText___last_byte(val* self);
long core__flat___FlatText___chars_to_escape_to_c(val* self);
val* core___core__FlatString___full(val* self, char* p0, long p1, long p2, long p3);
val* core___core__FlatString___with_infos(val* self, char* p0, long p1, long p2);
val* core___core__FlatString___substring_impl(val* self, long p0, long p1, long p2);
extern const struct class class_core__FlatString;
extern const int COLOR_core__abstract_text__FlatText___length;
extern const int COLOR_core__abstract_text__FlatText___byte_length;
extern const int COLOR_core__flat__FlatText___position;
extern const int COLOR_core__flat__FlatText___bytepos;
val* core__flat___core__flat__UnicodeFlatString___core__abstract_text__Text__substring_from(val* self, long p0);
void core__flat___core__flat__UnicodeFlatString___full_data(val* self, char* p0, long p1, long p2, long p3);
extern const struct class class_core__flat__UnicodeFlatString;
val* core__flat___core__flat__ASCIIFlatString___core__abstract_text__Text__substring(val* self, long p0, long p1);
uint32_t core__flat___core__flat__ASCIIFlatString___core__abstract_text__Text___91d_93d(val* self, long p0);
uint32_t core__flat___core__flat__ASCIIFlatString___FlatText__fetch_char_at(val* self, long p0);
long core__flat___core__flat__ASCIIFlatString___FlatText__char_to_byte_index(val* self, long p0);
val* core__flat___core__flat__ASCIIFlatString___FlatString__substring_impl(val* self, long p0, long p1, long p2);
void core__flat___core__flat__ASCIIFlatString___full_data(val* self, char* p0, long p1, long p2, long p3);
extern const struct class class_core__flat__ASCIIFlatString;
void core__flat___core__flat__FlatStringCharIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatStringCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatStringCharIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatStringCharIterator___curr_pos_61d(val* self, long p0);
void core__flat___core__flat__FlatStringCharIterator___max_61d(val* self, long p0);
val* core__flat___core__flat__FlatStringCharIterator___target(val* self);
long core__flat___core__flat__FlatStringCharIterator___curr_pos(val* self);
long core__flat___core__flat__FlatStringCharIterator___max(val* self);
extern const struct class class_core__flat__FlatStringCharIterator;
val* VIRTUAL_core__flat___core__flat__FlatStringCharView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatStringCharView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
extern const struct class class_core__flat__FlatStringCharView;
void core___core__FlatBuffer___core__kernel__Object__init(val* self);
val* core___core__FlatBuffer___core__abstract_text__Object__to_s(val* self);
char* core___core__FlatBuffer___core__abstract_text__Text__to_cstring(val* self);
val* core___core__FlatBuffer___core__abstract_text__Text__chars(val* self);
val* core___core__FlatBuffer___core__abstract_text__Text__substring(val* self, long p0, long p1);
val* core___core__Text____43d(val* self, val* p0);
val* core___core__FlatBuffer___core__abstract_text__Text__substrings(val* self);
val* core___core__Buffer___Text___42d(val* self, long p0);
val* core___core__FlatBuffer___core__abstract_text__Text__empty(val* self);
val* core__flat___Buffer___new(val* self);
long core__flat___FlatText___first_byte(val* self);
void core___core__FlatBuffer___core__abstract_text__Buffer__append(val* self, val* p0);
void core___core__FlatBuffer___core__abstract_text__Buffer__add(val* self, uint32_t p0);
val* core__flat___Buffer___with_cap(val* self, long p0);
void core___core__Buffer___written_61d(val* self, short int p0);
void core___core__FlatBuffer___core__abstract_text__Buffer__enlarge(val* self, long p0);
short int core___core__Buffer___written(val* self);
void core___core__FlatBuffer___core__abstract_text__Buffer___91d_93d_61d(val* self, long p0, uint32_t p1);
void core___core__FlatBuffer___with_infos(val* self, char* p0, long p1, long p2, long p3);
void core___core__FlatBuffer___reset(val* self);
void core___core__FlatBuffer___with_capacity(val* self, long p0);
void core___core__FlatBuffer___capacity_61d(val* self, long p0);
long core___core__FlatBuffer___capacity(val* self);
void core___core__FlatBuffer___rshift_bytes(val* self, long p0, long p1);
void core___core__FlatBuffer___lshift_bytes(val* self, long p0, long p1);
extern const struct class class_core__FlatBuffer;
extern const int COLOR_core__abstract_text__Buffer___written;
extern const int COLOR_core__flat__FlatBuffer___capacity;
val* VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SequenceRead__iterator_from(val* self, long p0);
void core___core__RemovableCollection___remove(val* self, val* p0);
void core___core__SimpleCollection___add_all(val* self, val* p0);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__Sequence__push(val* self, val* p0);
val* core___core__Sequence___shift(val* self);
val* core___core__Sequence___pop(val* self);
void core___core__Sequence___remove_at(val* self, long p0);
void core___core__Sequence___unshift(val* self, val* p0);
void VIRTUAL_core__flat___core__flat__FlatBufferCharView___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
extern const struct class class_core__flat__FlatBufferCharView;
void core__flat___core__flat__FlatBufferCharIterator___core__kernel__Object__init(val* self);
val* VIRTUAL_core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__item(val* self);
void core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__next(val* self);
short int core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core__flat___core__flat__FlatBufferCharIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__flat___core__flat__FlatBufferCharIterator___target_61d(val* self, val* p0);
void core__flat___core__flat__FlatBufferCharIterator___curr_pos_61d(val* self, long p0);
void core__flat___core__flat__FlatBufferCharIterator___max_61d(val* self, long p0);
val* core__flat___core__flat__FlatBufferCharIterator___target(val* self);
long core__flat___core__flat__FlatBufferCharIterator___curr_pos(val* self);
long core__flat___core__flat__FlatBufferCharIterator___max(val* self);
extern const struct class class_core__flat__FlatBufferCharIterator;
char* core___core__Text___to_cstring(val* self);
long core___core__Text___length(val* self);
val* core___core__Buffer___Text__chars(val* self);
val* core___core__Text___substring(val* self, long p0, long p1);
uint32_t core___core__Text____91d_93d(val* self, long p0);
long core___core__Text___byte_length(val* self);
val* core___core__Text___substrings(val* self);
val* core___core__Text___empty(val* self);
void core___core__Buffer___append(val* self, val* p0);
void core___core__Buffer___add(val* self, uint32_t p0);
void core___core__Buffer___enlarge(val* self, long p0);
void core___core__Buffer____91d_93d_61d(val* self, long p0, uint32_t p1);
extern const struct class class_core__Buffer;
short int VIRTUAL_core___core__CString___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__flat___CString___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__CString___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__Pointer___Object__hash(val* self);
short int core___core__Pointer___native_equals(val* self, val* p0);
short int core___core__Pointer___address_is_null(val* self);
char* core___core__CString___new(char* self, long p0);
val* core__flat___CString___to_s_unsafe(char* self, val* p0, val* p1, val* p2, val* p3);
char* core__environ___CString___get_environ(char* self);
long core___core__CString___cstring_length(char* self);
val* core__flat___CString___clean_utf8(char* self, long p0);
long core___core__CString___utf8_length(char* self, long p0, long p1);
void core___core__CString___copy_to(char* self, char* p0, long p1, long p2, long p3);
void core___core__CString____91d_93d_61d(char* self, long p0, unsigned char p1);
unsigned char core___core__CString____91d_93d(char* self, long p0);
uint32_t core___core__CString___fetch_95d4_chars(char* self, long p0);
long core___core__CString___length_of_char_at(char* self, long p0);
uint32_t core___core__CString___char_at(char* self, long p0);
uint32_t core___core__CString___fetch_95d4_hchars(char* self, long p0);
long core___core__CString___find_beginning_of_char_at(char* self, long p0);
long core___core__CString___char_to_byte_index_cached(char* self, long p0, long p1, long p2);
long core___core__CString___char_to_byte_index(char* self, long p0);
void core__flat___CString___set_char_at(char* self, long p0, uint32_t p1);
extern const struct type type_core__CString;
extern const struct class class_core__CString;
void core__environ___Sys___core__kernel__Object__init(val* self);
val* core__utf8___Sys___utf8_codec(val* self);
void core___core__Sys___run(val* self);
void core__math___Sys___srand_from(val* self, long p0);
long core__file___Sys___buffer_mode_line(val* self);
void nitcc__nitcc_parser_gen___core__Sys___main(val* self);
void core__math___Sys___srand(val* self);
long core___core__Sys___errno(val* self);
void core__file___Sys___print(val* self, val* p0);
val* core__file___Sys___stdout(val* self);
long core__ropes___Sys___maxlen(val* self);
void core__math___Sys___core__kernel__Object__init(val* self);
extern const struct class class_core__Sys;
short int VIRTUAL_core___core__Bool___Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Bool___Object__to_s(val* self);
short int VIRTUAL_core___core__Bool___Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Bool___Object__object_id(val* self);
long VIRTUAL_core___core__Bool___Object__hash(val* self);
long core___core__Bool___to_i(short int self);
short int VIRTUAL_core___core__Float___Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Float___Object__to_s(val* self);
short int VIRTUAL_core___core__Float___Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Float___Object__object_id(val* self);
short int VIRTUAL_core___core__Float___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Float___Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Float___Numeric__unary_32d_45d(val* self);
val* core__abstract_text___Float___to_precision(double self, long p0);
long core__math___Float___is_inf(double self);
long VIRTUAL_core___core__Float___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Float___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Float___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Float___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Float___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Float___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Float___Numeric___47d(val* self, val* p0);
short int core__math___Float___is_nan(double self);
short int core__math___Float___native_is_inf(double self);
extern const struct type type_core__Float;
extern const struct class class_core__Float;
short int VIRTUAL_core___core__Byte___Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Byte___Object__to_s(val* self);
short int VIRTUAL_core___core__Byte___Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Byte___Object__object_id(val* self);
long VIRTUAL_core___core__Byte___Object__hash(val* self);
short int VIRTUAL_core___core__Byte___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Byte___Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Byte___Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Byte___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Byte___Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__Byte___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Byte___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Byte___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Byte___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Byte___Numeric___47d(val* self, val* p0);
long core__abstract_text___Byte___byte_to_s_len(unsigned char self);
void core__abstract_text___Byte___native_byte_to_s(unsigned char self, char* p0, long p1);
unsigned char core__math___Byte____38d(unsigned char self, unsigned char p0);
uint32_t core___core__Byte___ascii(unsigned char self);
unsigned char core___core__Byte____62d_62d(unsigned char self, long p0);
extern const struct type type_core__Byte;
extern const struct class class_core__Byte;
short int VIRTUAL_core___core__Int___Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__flat___Int___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__Int___Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Int___Object__object_id(val* self);
long VIRTUAL_core___core__Int___Object__hash(val* self);
short int VIRTUAL_core___core__Int___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int___Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int___Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int___Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__Int___Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int___Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int___Numeric__to_b(val* self);
int8_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i8(val* self);
int16_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core__fixed_ints___Int___Numeric__to_u16(val* self);
int32_t VIRTUAL_core__fixed_ints___Int___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core__fixed_ints___Int___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Int___Numeric___47d(val* self, val* p0);
val* core__abstract_text___Int___strerror(long self);
long core__abstract_text___Int___int_to_s_len(long self);
void core__abstract_text___Int___native_int_to_s(long self, char* p0, long p1);
char* core__abstract_text___Int___strerror_ext(long self);
long core___core__Int___abs(long self);
uint32_t core___core__Int___code_point(long self);
long core___core__Int____60d_60d(long self, long p0);
long core___core__Int____37d(long self, long p0);
val* core__abstract_text___Int___to_hex(long self);
val* core__abstract_text___Int___to_base(long self, long p0);
long core__math___Int____124d(long self, long p0);
long core___core__Int____62d_62d(long self, long p0);
long core__math___Int____38d(long self, long p0);
long core___core__Int___digit_count(long self, long p0);
void core__abstract_text___Int___fill_buffer(long self, val* p0, long p1);
long core___core__Int___digit_count_base_95d10(long self);
uint32_t core___core__Int___to_c(long self);
short int VIRTUAL_core___core__Char___Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__abstract_text___Char___Object__to_s(val* self);
short int VIRTUAL_core___core__Char___Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Char___Object__object_id(val* self);
long VIRTUAL_core___core__Char___Object__hash(val* self);
short int VIRTUAL_core___core__Char___Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Char___Comparable___60d(val* self, val* p0);
val* VIRTUAL_core__string_search___Char___Pattern__search_in(val* self, val* p0, long p1);
long VIRTUAL_core__string_search___Char___Pattern__search_index_in(val* self, val* p0, long p1);
val* VIRTUAL_core___core__Char___Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Char___Discrete__distance(val* self, val* p0);
long core__abstract_text___Char___u8char_len(uint32_t self);
void core__abstract_text___Char___u8char_tos(uint32_t self, char* p0, long p1);
long core___core__Char___code_point(uint32_t self);
short int core__abstract_text___Char___is_numeric(uint32_t self);
long core__abstract_text___Char___from_hex(uint32_t self);
short int core__abstract_text___Char___is_hexdigit(uint32_t self);
long core___core__Char___to_i(uint32_t self);
short int core___core__Char___is_digit(uint32_t self);
uint32_t core___core__Char___to_lower(uint32_t self);
short int core___core__Char___is_upper(uint32_t self);
short int core___core__Pointer___Object___61d_61d(val* self, val* p0);
extern const struct type type_core__Pointer;
extern const struct class class_core__Pointer;
void core__abstract_collection___core__abstract_collection__RefIterator___core__kernel__Object__init(val* self);
val* core__abstract_collection___core__abstract_collection__RefIterator___Iterator__item(val* self);
void core__abstract_collection___core__abstract_collection__RefIterator___Iterator__next(val* self);
short int core__abstract_collection___core__abstract_collection__RefIterator___Iterator__is_ok(val* self);
void core__abstract_collection___core__abstract_collection__RefIterator___container_61d(val* self, val* p0);
void core__abstract_collection___core__abstract_collection__RefIterator___is_ok_61d(val* self, short int p0);
extern const struct class class_core__abstract_collection__RefIterator;
extern const int COLOR_core__abstract_collection__RefIterator___is_ok;
void core___core__MapKeysIterator___core__kernel__Object__init(val* self);
val* core___core__MapKeysIterator___Iterator__item(val* self);
void core___core__MapKeysIterator___Iterator__next(val* self);
short int core___core__MapKeysIterator___Iterator__is_ok(val* self);
void core___core__MapKeysIterator___original_iterator_61d(val* self, val* p0);
val* core___core__MapKeysIterator___original_iterator(val* self);
extern const struct class class_core__MapKeysIterator;
void core___core__MapValuesIterator___core__kernel__Object__init(val* self);
val* core___core__MapValuesIterator___Iterator__item(val* self);
void core___core__MapValuesIterator___Iterator__next(val* self);
short int core___core__MapValuesIterator___Iterator__is_ok(val* self);
void core___core__MapValuesIterator___original_iterator_61d(val* self, val* p0);
val* core___core__MapValuesIterator___original_iterator(val* self);
extern const struct class class_core__MapValuesIterator;
void core___core__List___core__kernel__Object__init(val* self);
void core___core__List___length_61d(val* self, long p0);
val* core___core__List___get_node(val* self, long p0);
val* core___core__List___search_node_after(val* self, val* p0, val* p1);
void core___core__List___remove_node(val* self, val* p0);
long core___core__List___core__abstract_collection__Collection__length(val* self);
short int core___core__List___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__List___core__abstract_collection__Collection__iterator(val* self);
short int core___core__List___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__List___core__abstract_collection__Collection__first(val* self);
val* core___core__List___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
val* core___core__SequenceRead___iterator_from(val* self, long p0);
val* core___core__List___core__abstract_collection__SequenceRead__last(val* self);
void core___core__List___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
void core___core__Sequence___SimpleCollection__add(val* self, val* p0);
void core___core__List___core__abstract_collection__Sequence__push(val* self, val* p0);
val* core___core__List___core__abstract_collection__Sequence__shift(val* self);
val* core___core__List___core__abstract_collection__Sequence__pop(val* self);
void core___core__List___core__abstract_collection__Sequence__remove_at(val* self, long p0);
void core___core__List___core__abstract_collection__Sequence__unshift(val* self, val* p0);
void core___core__List___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
extern const struct class class_core__List;
extern const int COLOR_core__list__List___length;
void core___core__ListIterator___core__kernel__Object__init(val* self);
val* core___core__ListIterator___core__abstract_collection__Iterator__item(val* self);
void core___core__ListIterator___core__abstract_collection__Iterator__next(val* self);
short int core___core__ListIterator___core__abstract_collection__Iterator__is_ok(val* self);
long core___core__ListIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core___core__ListIterator___list_61d(val* self, val* p0);
extern const struct class class_core__ListIterator;
extern const int COLOR_core__list__ListIterator___index;
void core___core__Ref___core__kernel__Object__init(val* self);
void core___core__Ref___item_61d(val* self, val* p0);
val* core___core__Ref___item(val* self);
void core__list___core__list__ListNode___next_61d(val* self, val* p0);
long core___core__Ref___Collection__length(val* self);
short int core___core__Ref___Collection__is_empty(val* self);
val* core___core__Ref___Collection__iterator(val* self);
short int core___core__Ref___Collection__has(val* self, val* p0);
val* core___core__Ref___Collection__first(val* self);
void core__list___core__list__ListNode___prev_61d(val* self, val* p0);
val* core__list___core__list__ListNode___next(val* self);
val* core__list___core__list__ListNode___prev(val* self);
extern const struct class class_core__list__ListNode;
void core___core__Array___core__kernel__Object__init(val* self);
short int core___core__Array___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__AbstractArrayRead___core__abstract_collection__Collection__length(val* self);
short int core___core__AbstractArrayRead___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__AbstractArrayRead___core__abstract_collection__Collection__iterator(val* self);
short int core___core__AbstractArrayRead___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__Array___core__abstract_collection__SequenceRead___91d_93d(val* self, long p0);
long core___core__AbstractArrayRead___core__abstract_collection__SequenceRead__index_of(val* self, val* p0);
long core___core__AbstractArrayRead___core__abstract_collection__SequenceRead__index_of_from(val* self, val* p0, long p1);
void core___core__Array___AbstractArrayRead__copy_to(val* self, long p0, long p1, val* p2, long p3);
void core___core__AbstractArray___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
void core___core__Array___core__abstract_collection__SimpleCollection__add_all(val* self, val* p0);
void core___core__Array___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
void core___core__AbstractArrayRead___length_61d(val* self, long p0);
val* core___core__AbstractArrayRead___reversed(val* self);
void core___core__AbstractArray___core__abstract_collection__Sequence__push(val* self, val* p0);
val* core___core__AbstractArray___core__abstract_collection__Sequence__shift(val* self);
val* core___core__AbstractArray___core__abstract_collection__Sequence__pop(val* self);
void core___core__AbstractArray___core__abstract_collection__Sequence__remove_at(val* self, long p0);
void core___core__AbstractArray___core__abstract_collection__Sequence__unshift(val* self, val* p0);
void core___core__Array___core__abstract_collection__Sequence___91d_93d_61d(val* self, long p0, val* p1);
void core___core__Array___AbstractArray__enlarge(val* self, long p0);
void core___core__Array___with_native(val* self, val* p0, long p1);
void core___core__Array___with_capacity(val* self, long p0);
val* core___core__Array___items(val* self);
void core___core__AbstractArrayRead___copy_to(val* self, long p0, long p1, val* p2, long p3);
extern const struct class class_core__Array;
extern const int COLOR_core__array__AbstractArrayRead___length;
extern const int COLOR_core__array__Array___capacity;
void core__array___core__array__ArrayIterator___core__kernel__Object__init(val* self);
val* core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__item(val* self);
void core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__next(val* self);
short int core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__is_ok(val* self);
void core__array___core__array__ArrayIterator___core__abstract_collection__Iterator__finish(val* self);
long core__array___core__array__ArrayIterator___core__abstract_collection__IndexedIterator__index(val* self);
void core__array___core__array__ArrayIterator___array_61d(val* self, val* p0);
extern const struct class class_core__array__ArrayIterator;
extern const int COLOR_core__array__ArrayIterator___index;
void core___core__ArraySet___core__kernel__Object__init(val* self);
short int core___core__Set___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__Set___core__kernel__Object__hash(val* self);
void core___core__ArraySet___remove_at(val* self, long p0);
long core___core__ArraySet___core__abstract_collection__Collection__length(val* self);
short int core___core__ArraySet___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__ArraySet___core__abstract_collection__Collection__iterator(val* self);
short int core___core__ArraySet___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__ArraySet___core__abstract_collection__Collection__first(val* self);
void core___core__ArraySet___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
void core___core__ArraySet___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
extern const struct class class_core__ArraySet;
void core__array___core__array__ArraySetIterator___core__kernel__Object__init(val* self);
val* core__array___core__array__ArraySetIterator___core__abstract_collection__Iterator__item(val* self);
void core__array___core__array__ArraySetIterator___core__abstract_collection__Iterator__next(val* self);
short int core__array___core__array__ArraySetIterator___core__abstract_collection__Iterator__is_ok(val* self);
void core__array___core__array__ArraySetIterator___iter_61d(val* self, val* p0);
extern const struct class class_core__array__ArraySetIterator;
val* core__flat___NativeArray___native_to_s(val* self);
val* core___core__NativeArray____91d_93d(val* self, long p0);
long core___core__NativeArray___length(val* self);
void core___core__NativeArray____91d_93d_61d(val* self, long p0, val* p1);
val* core___core__NativeArray___new(val* self, long p0);
void core___core__NativeArray___copy_to(val* self, val* p0, long p1);
void core___core__NativeArray___memmove(val* self, long p0, long p1, val* p2, long p3);
extern const struct class class_core__NativeArray;
void core___core__HashMap___core__kernel__Object__init(val* self);
short int core___core__MapRead___core__kernel__Object___61d_61d(val* self, val* p0);
long core___core__MapRead___core__kernel__Object__hash(val* self);
short int core___core__HashMap___core__abstract_collection__MapRead__has_key(val* self, val* p0);
val* core___core__HashMap___core__abstract_collection__MapRead___91d_93d(val* self, val* p0);
val* core___core__HashMap___core__abstract_collection__MapRead__iterator(val* self);
long core___core__HashMap___core__abstract_collection__MapRead__length(val* self);
short int core___core__HashMap___core__abstract_collection__MapRead__is_empty(val* self);
val* core___core__HashMap___core__abstract_collection__MapRead__keys(val* self);
val* core___core__MapRead___provide_default_value(val* self, val* p0);
void core___core__HashMap___core__abstract_collection__Map___91d_93d_61d(val* self, val* p0, val* p1);
void core__hash_collection___core__hash_collection__HashCollection___enlarge(val* self, long p0);
long core__hash_collection___core__hash_collection__HashCollection___index_at(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashCollection___node_at_idx(val* self, long p0, val* p1);
void core__hash_collection___core__hash_collection__HashCollection___store(val* self, long p0, val* p1);
val* core__hash_collection___core__hash_collection__HashCollection___node_at(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashCollection___remove_node(val* self, val* p0);
extern const struct class class_core__HashMap;
extern const int COLOR_core__hash_collection__HashCollection___capacity;
extern const int COLOR_core__hash_collection__HashCollection___the_length;
void core__hash_collection___core__hash_collection__HashMapKeys___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashMapKeys___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapKeys___map(val* self);
long core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__length(val* self);
short int core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__is_empty(val* self);
val* core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__iterator(val* self);
short int core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__has(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__Collection__first(val* self);
void core__hash_collection___core__hash_collection__HashMapKeys___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
extern const struct class class_core__hash_collection__HashMapKeys;
void core__hash_collection___core__hash_collection__HashMapValues___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashMapValues___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapValues___map(val* self);
long core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__length(val* self);
short int core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__is_empty(val* self);
val* core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__iterator(val* self);
short int core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__has(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__Collection__first(val* self);
void core__hash_collection___core__hash_collection__HashMapValues___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
extern const struct class class_core__hash_collection__HashMapValues;
void core__hash_collection___core__hash_collection__HashMapNode___core__kernel__Object__init(val* self);
void core__hash_collection___core__hash_collection__HashNode___key_61d(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashMapNode___value_61d(val* self, val* p0);
void core__hash_collection___core__hash_collection__HashNode___core__kernel__Object__init(val* self);
extern const struct class class_core__hash_collection__HashMapNode;
void core__hash_collection___core__hash_collection__HashMapIterator___core__kernel__Object__init(val* self);
short int core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__is_ok(val* self);
val* core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__key(val* self);
val* core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__item(val* self);
void core__hash_collection___core__hash_collection__HashMapIterator___core__abstract_collection__MapIterator__next(val* self);
void core___core__MapIterator___finish(val* self);
void core__hash_collection___core__hash_collection__HashMapIterator___map_61d(val* self, val* p0);
val* core__hash_collection___core__hash_collection__HashMapIterator___map(val* self);
extern const struct class class_core__hash_collection__HashMapIterator;
void core___core__HashSet___core__kernel__Object__init(val* self);
long core___core__HashSet___core__abstract_collection__Collection__length(val* self);
short int core___core__HashSet___core__abstract_collection__Collection__is_empty(val* self);
val* core___core__HashSet___core__abstract_collection__Collection__iterator(val* self);
short int core___core__HashSet___core__abstract_collection__Collection__has(val* self, val* p0);
val* core___core__HashSet___core__abstract_collection__Collection__first(val* self);
void core___core__HashSet___core__abstract_collection__RemovableCollection__remove(val* self, val* p0);
void core___core__HashSet___core__abstract_collection__SimpleCollection__add(val* self, val* p0);
extern const struct class class_core__HashSet;
extern const struct class class_core__hash_collection__HashSetNode;
void core__hash_collection___core__hash_collection__HashSetIterator___core__kernel__Object__init(val* self);
val* core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__item(val* self);
void core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__next(val* self);
short int core__hash_collection___core__hash_collection__HashSetIterator___core__abstract_collection__Iterator__is_ok(val* self);
void core__hash_collection___core__hash_collection__HashSetIterator___set_61d(val* self, val* p0);
extern const struct class class_core__hash_collection__HashSetIterator;
short int VIRTUAL_core___core__Int8___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__fixed_ints_text___Int8___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__Int8___core__kernel__Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Int8___core__kernel__Object__object_id(val* self);
long VIRTUAL_core___core__Int8___core__kernel__Object__hash(val* self);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int8___core__kernel__Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int8___core__kernel__Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__Int8___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int8___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int8___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int8___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int8___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int8___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int8___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Int8___core__kernel__Numeric___47d(val* self, val* p0);
long core__fixed_ints_text___Int8___to_s_len(int8_t self);
void core__fixed_ints_text___Int8___native_to_s(int8_t self, char* p0, long p1);
extern const struct type type_core__Int8;
extern const struct class class_core__Int8;
short int VIRTUAL_core___core__Int16___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__fixed_ints_text___Int16___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__Int16___core__kernel__Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Int16___core__kernel__Object__object_id(val* self);
long VIRTUAL_core___core__Int16___core__kernel__Object__hash(val* self);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int16___core__kernel__Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int16___core__kernel__Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__Int16___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int16___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int16___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int16___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int16___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int16___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int16___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Int16___core__kernel__Numeric___47d(val* self, val* p0);
long core__fixed_ints_text___Int16___to_s_len(int16_t self);
void core__fixed_ints_text___Int16___native_to_s(int16_t self, char* p0, long p1);
extern const struct type type_core__Int16;
extern const struct class class_core__Int16;
short int VIRTUAL_core___core__UInt16___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__fixed_ints_text___UInt16___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__UInt16___core__kernel__Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__UInt16___core__kernel__Object__object_id(val* self);
long VIRTUAL_core___core__UInt16___core__kernel__Object__hash(val* self);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt16___core__kernel__Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__UInt16___core__kernel__Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__UInt16___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__UInt16___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__UInt16___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__UInt16___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__UInt16___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__UInt16___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__UInt16___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__UInt16___core__kernel__Numeric___47d(val* self, val* p0);
long core__fixed_ints_text___UInt16___to_s_len(uint16_t self);
void core__fixed_ints_text___UInt16___native_to_s(uint16_t self, char* p0, long p1);
extern const struct type type_core__UInt16;
extern const struct class class_core__UInt16;
short int VIRTUAL_core___core__Int32___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__fixed_ints_text___Int32___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__Int32___core__kernel__Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__Int32___core__kernel__Object__object_id(val* self);
long VIRTUAL_core___core__Int32___core__kernel__Object__hash(val* self);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__Int32___core__kernel__Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__Int32___core__kernel__Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__Int32___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__Int32___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__Int32___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__Int32___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__Int32___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__Int32___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__Int32___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__Int32___core__kernel__Numeric___47d(val* self, val* p0);
long core__fixed_ints_text___Int32___to_s_len(int32_t self);
void core__fixed_ints_text___Int32___native_to_s(int32_t self, char* p0, long p1);
extern const struct type type_core__Int32;
extern const struct class class_core__Int32;
short int VIRTUAL_core___core__UInt32___core__kernel__Object___33d_61d(val* self, val* p0);
val* VIRTUAL_core__fixed_ints_text___UInt32___core__abstract_text__Object__to_s(val* self);
short int VIRTUAL_core___core__UInt32___core__kernel__Object___61d_61d(val* self, val* p0);
long VIRTUAL_core___core__UInt32___core__kernel__Object__object_id(val* self);
long VIRTUAL_core___core__UInt32___core__kernel__Object__hash(val* self);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___60d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___62d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___62d_61d(val* self, val* p0);
short int VIRTUAL_core___core__UInt32___core__kernel__Comparable___60d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___43d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___45d(val* self, val* p0);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric__unary_32d_45d(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Discrete__successor(val* self, long p0);
long VIRTUAL_core___core__UInt32___core__kernel__Discrete__distance(val* self, val* p0);
long VIRTUAL_core___core__UInt32___core__kernel__Numeric__to_i(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___42d(val* self, val* p0);
unsigned char VIRTUAL_core___core__UInt32___core__kernel__Numeric__to_b(val* self);
int8_t VIRTUAL_core___core__UInt32___Numeric__to_i8(val* self);
int16_t VIRTUAL_core___core__UInt32___Numeric__to_i16(val* self);
uint16_t VIRTUAL_core___core__UInt32___Numeric__to_u16(val* self);
int32_t VIRTUAL_core___core__UInt32___Numeric__to_i32(val* self);
uint32_t VIRTUAL_core___core__UInt32___Numeric__to_u32(val* self);
val* VIRTUAL_core___core__UInt32___core__kernel__Numeric___47d(val* self, val* p0);
long core__fixed_ints_text___UInt32___to_s_len(uint32_t self);
void core__fixed_ints_text___UInt32___native_to_s(uint32_t self, char* p0, long p1);
uint32_t core___core__UInt32____38d(uint32_t self, uint32_t p0);
uint32_t core___core__UInt32____124d(uint32_t self, uint32_t p0);
uint32_t core___core__UInt32____62d_62d(uint32_t self, long p0);
uint32_t core__native___UInt32___code_point(uint32_t self);
extern const struct type type_core__UInt32;
extern const struct class class_core__UInt32;
void core___core__Match___core__kernel__Object__init(val* self);
val* core___core__Match___core__abstract_text__Object__to_s(val* self);
long core___core__Match___from(val* self);
void core___core__Match___string_61d(val* self, val* p0);
void core___core__Match___from_61d(val* self, long p0);
void core___core__Match___length_61d(val* self, long p0);
long core___core__Match___after(val* self);
long core___core__Match___length(val* self);
val* core___core__Match___string(val* self);
extern const struct class class_core__Match;
void core___core__Stream___last_error_61d(val* self, val* p0);
void core___core__FileWriter___core__stream__Stream__close(val* self);
val* core___core__Stream___last_error(val* self);
void core___core__FileStream___path_61d(val* self, val* p0);
void core___core__FileStream___set_buffering_mode(val* self, long p0, long p1);
void core___core__FileWriter___core__stream__Writer__write(val* self, val* p0);
void core___core__FileWriter___open(val* self, val* p0);
void core___core__FileWriter___is_writable_61d(val* self, short int p0);
void core___core__FileWriter___write_native(val* self, char* p0, long p1, long p2);
void core___core__FileStream___core__stream__Stream__close(val* self);
extern const struct class class_core__FileWriter;
extern const int COLOR_core__utf8__Sys__utf8_codec;
extern const int COLOR_core__stream__Writer___coder;
extern const int COLOR_core__file__FileWriter___is_writable;
void core___core__Stdin___core__kernel__Object__init(val* self);
void core___core__FileReader___core__stream__Stream__close(val* self);
void core___core__BufferedReader___prepare_buffer(val* self, long p0);
void core___core__BufferedReader___buffer_reset(val* self);
void core___core__FileReader___end_reached_61d(val* self, short int p0);
extern const struct class class_core__Stdin;
extern const int COLOR_core__stream__Reader___decoder;
extern const int COLOR_core__stream__BufferedReader___buffer;
extern const int COLOR_core__stream__BufferedReader___buffer_pos;
extern const int COLOR_core__stream__BufferedReader___buffer_length;
extern const int COLOR_core__stream__BufferedReader___buffer_capacity;
extern const int COLOR_core__file__FileReader___end_reached;
void core___core__Stdout___core__kernel__Object__init(val* self);
extern const struct class class_core__Stdout;
void core___core__Stderr___core__kernel__Object__init(val* self);
extern const struct class class_core__Stderr;
val* core__file___core__file__NativeFile___native_stdin(val* self);
val* core__file___core__file__NativeFile___native_stdout(val* self);
val* core__file___core__file__NativeFile___native_stderr(val* self);
long core__file___core__file__NativeFile___set_buffering_type(val* self, long p0, long p1);
val* core__file___core__file__NativeFile___io_open_write(val* self, char* p0);
long core__file___core__file__NativeFile___io_close(val* self);
long core__file___core__file__NativeFile___io_write(val* self, char* p0, long p1, long p2);
extern const struct class class_core__file__NativeFile;
void core___core__Error___core__kernel__Object__init(val* self);
val* core___core__Error___core__abstract_text__Object__to_s(val* self);
void core___core__Error___message_61d(val* self, val* p0);
val* core___core__Error___message(val* self);
extern const struct class class_core__IOError;
extern const struct class class_core__utf8__UTF8Codec;
