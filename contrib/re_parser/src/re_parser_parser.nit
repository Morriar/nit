# Parser generated by nitcc for the grammar re_parser
module re_parser_parser is no_warning("missing-doc","old-init")
import nitcc_runtime
class Parser_re_parser
	super Parser
	redef fun start_state do return state_Start
end
private fun state_Start: LRStateStart do return once new LRStateStart
private fun state_re: LRStatere do return once new LRStatere
private fun state_re_36d1: LRStatere_36d1 do return once new LRStatere_36d1
private fun state_re_36d2: LRStatere_36d2 do return once new LRStatere_36d2
private fun state_re_36d0: LRStatere_36d0 do return once new LRStatere_36d0
private fun state_char: LRStatechar do return once new LRStatechar
private fun state__39d_40d_39d: LRState_39d_40d_39d do return once new LRState_39d_40d_39d
private fun state_re_32dEof: LRStatere_32dEof do return once new LRStatere_32dEof
private fun state_re_32d_39d_124d_39d: LRStatere_32d_39d_124d_39d do return once new LRStatere_32d_39d_124d_39d
private fun state_re_36d1_32dre_36d2: LRStatere_36d1_32dre_36d2 do return once new LRStatere_36d1_32dre_36d2
private fun state_re_36d2_32d_39d_63d_39d: LRStatere_36d2_32d_39d_63d_39d do return once new LRStatere_36d2_32d_39d_63d_39d
private fun state_re_36d2_32d_39d_42d_39d: LRStatere_36d2_32d_39d_42d_39d do return once new LRStatere_36d2_32d_39d_42d_39d
private fun state_re_36d2_32d_39d_43d_39d: LRStatere_36d2_32d_39d_43d_39d do return once new LRStatere_36d2_32d_39d_43d_39d
private fun state__39d_40d_39d_32dre: LRState_39d_40d_39d_32dre do return once new LRState_39d_40d_39d_32dre
private fun state_re_32d_39d_124d_39d_32dre_36d1: LRStatere_32d_39d_124d_39d_32dre_36d1 do return once new LRStatere_32d_39d_124d_39d_32dre_36d1
private fun state__39d_40d_39d_32dre_32d_39d_41d_39d: LRState_39d_40d_39d_32dre_32d_39d_41d_39d do return once new LRState_39d_40d_39d_32dre_32d_39d_41d_39d
private fun goto_Nre: Goto_Nre do return once new Goto_Nre
private fun reduce_Nre_alter(parser: Parser) do
		# REDUCE re::re_alter=re '|' re$1
		var n2 = parser.pop.as(Nre)
		var n1 = parser.pop.as(N_39d_124d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_alter(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre)
end
private fun reduce_Nre_95d1(parser: Parser) do
		# REDUCE re::re_1=re$1
		var n0 = parser.pop.as(Nre)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nre)
end
private fun goto_Nre_36d0: Goto_Nre_36d0 do return once new Goto_Nre_36d0
private fun reduce_Nre_char(parser: Parser) do
		# REDUCE re$0::re_char=char
		var n0 = parser.pop.as(Nchar)
		var p1 = new Nre_char(n0)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d0)
end
private fun reduce_Nre_par(parser: Parser) do
		# REDUCE re$0::re_par='(' re ')'
		var n2 = parser.pop.as(N_39d_41d_39d)
		var n1 = parser.pop.as(Nre)
		var n0 = parser.pop.as(N_39d_40d_39d)
		var p1 = new Nre_par(n0, n1, n2)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d0)
end
private fun goto_Nre_36d2: Goto_Nre_36d2 do return once new Goto_Nre_36d2
private fun reduce_Nre_ques(parser: Parser) do
		# REDUCE re$2::re_ques=re$2 '?'
		var n1 = parser.pop.as(N_39d_63d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_ques(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d2)
end
private fun reduce_Nre_star(parser: Parser) do
		# REDUCE re$2::re_star=re$2 '*'
		var n1 = parser.pop.as(N_39d_42d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_star(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d2)
end
private fun reduce_Nre_plus(parser: Parser) do
		# REDUCE re$2::re_plus=re$2 '+'
		var n1 = parser.pop.as(N_39d_43d_39d)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_plus(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d2)
end
private fun reduce_Nre_36d2_95d3(parser: Parser) do
		# REDUCE re$2::re$2_3=re$0
		var n0 = parser.pop.as(Nre)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d2)
end
private fun goto_Nre_36d1: Goto_Nre_36d1 do return once new Goto_Nre_36d1
private fun reduce_Nre_conc(parser: Parser) do
		# REDUCE re$1::re_conc=re$1 re$2
		var n1 = parser.pop.as(Nre)
		var n0 = parser.pop.as(Nre)
		var p1 = new Nre_conc(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d1)
end
private fun reduce_Nre_36d1_95d1(parser: Parser) do
		# REDUCE re$1::re$1_1=re$2
		var n0 = parser.pop.as(Nre)
		var prod = n0
		parser.node_stack.push prod
		parser.goto(goto_Nre_36d1)
end
private fun goto_N_start: Goto_N_start do return once new Goto_N_start
private fun reduce_NStart(parser: Parser) do
		# REDUCE _start::Start=re Eof
		var n1 = parser.pop.as(NEof)
		var n0 = parser.pop.as(Nre)
		var p1 = new NStart(n0, n1)
		var prod = p1
		parser.node_stack.push prod
		parser.stop = true
end
redef class NToken
	# guarded action for state Start
	# 2 shift(s) and 0 reduce(s)
	private fun action_sStart(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state re
	# 2 shift(s) and 0 reduce(s)
	private fun action_sre(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state re$1
	# 2 shift(s) and 1 reduce(s)
	private fun action_sre_36d1(parser: Parser) do
		reduce_Nre_95d1(parser)
	end
	# guarded action for state re$2
	# 3 shift(s) and 1 reduce(s)
	private fun action_sre_36d2(parser: Parser) do
		reduce_Nre_36d1_95d1(parser)
	end
	# guarded action for state '('
	# 2 shift(s) and 0 reduce(s)
	private fun action_s_39d_40d_39d(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state re '|'
	# 2 shift(s) and 0 reduce(s)
	private fun action_sre_32d_39d_124d_39d(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state re$1 re$2
	# 3 shift(s) and 1 reduce(s)
	private fun action_sre_36d1_32dre_36d2(parser: Parser) do
		reduce_Nre_conc(parser)
	end
	# guarded action for state '(' re
	# 2 shift(s) and 0 reduce(s)
	private fun action_s_39d_40d_39d_32dre(parser: Parser) do
		parser.parse_error
	end
	# guarded action for state re '|' re$1
	# 2 shift(s) and 1 reduce(s)
	private fun action_sre_32d_39d_124d_39d_32dre_36d1(parser: Parser) do
		reduce_Nre_alter(parser)
	end
end
class Nchar
	super NToken
	redef fun action_sStart(parser) do
		parser.shift(state_char)
	end
	redef fun action_sre_36d1(parser) do
		parser.shift(state_char)
	end
	redef fun action_s_39d_40d_39d(parser) do
		parser.shift(state_char)
	end
	redef fun action_sre_32d_39d_124d_39d(parser) do
		parser.shift(state_char)
	end
	redef fun action_sre_32d_39d_124d_39d_32dre_36d1(parser) do
		parser.shift(state_char)
	end
	redef fun node_name do return "char"
end
class N_39d_40d_39d
	super NToken
	redef fun action_sStart(parser) do
		parser.shift(state__39d_40d_39d)
	end
	redef fun action_sre_36d1(parser) do
		parser.shift(state__39d_40d_39d)
	end
	redef fun action_s_39d_40d_39d(parser) do
		parser.shift(state__39d_40d_39d)
	end
	redef fun action_sre_32d_39d_124d_39d(parser) do
		parser.shift(state__39d_40d_39d)
	end
	redef fun action_sre_32d_39d_124d_39d_32dre_36d1(parser) do
		parser.shift(state__39d_40d_39d)
	end
	redef fun node_name do return "\'(\'"
end
class N_39d_41d_39d
	super NToken
	redef fun action_s_39d_40d_39d_32dre(parser) do
		parser.shift(state__39d_40d_39d_32dre_32d_39d_41d_39d)
	end
	redef fun node_name do return "\')\'"
end
class N_39d_63d_39d
	super NToken
	redef fun action_sre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_63d_39d)
	end
	redef fun action_sre_36d1_32dre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_63d_39d)
	end
	redef fun node_name do return "\'?\'"
end
class N_39d_42d_39d
	super NToken
	redef fun action_sre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_42d_39d)
	end
	redef fun action_sre_36d1_32dre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_42d_39d)
	end
	redef fun node_name do return "\'*\'"
end
class N_39d_43d_39d
	super NToken
	redef fun action_sre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_43d_39d)
	end
	redef fun action_sre_36d1_32dre_36d2(parser) do
		parser.shift(state_re_36d2_32d_39d_43d_39d)
	end
	redef fun node_name do return "\'+\'"
end
class N_39d_124d_39d
	super NToken
	redef fun action_sre(parser) do
		parser.shift(state_re_32d_39d_124d_39d)
	end
	redef fun action_s_39d_40d_39d_32dre(parser) do
		parser.shift(state_re_32d_39d_124d_39d)
	end
	redef fun node_name do return "\'|\'"
end
redef class NEof
	super NToken
	redef fun action_sre(parser) do
		parser.shift(state_re_32dEof)
	end
	redef fun node_name do return "Eof"
end
redef class LRGoto
	private fun goto_sStart(parser: Parser) do abort
	private fun goto_sre_36d1(parser: Parser) do abort
	private fun goto_s_39d_40d_39d(parser: Parser) do abort
	private fun goto_sre_32d_39d_124d_39d(parser: Parser) do abort
	private fun goto_sre_32d_39d_124d_39d_32dre_36d1(parser: Parser) do abort
end
class Goto_Nre
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_re)
	end
	redef fun goto_s_39d_40d_39d(parser) do
		parser.push(state__39d_40d_39d_32dre)
	end
end
class Goto_Nre_36d0
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_re_36d0)
	end
	redef fun goto_sre_36d1(parser) do
		parser.push(state_re_36d0)
	end
	redef fun goto_s_39d_40d_39d(parser) do
		parser.push(state_re_36d0)
	end
	redef fun goto_sre_32d_39d_124d_39d(parser) do
		parser.push(state_re_36d0)
	end
	redef fun goto_sre_32d_39d_124d_39d_32dre_36d1(parser) do
		parser.push(state_re_36d0)
	end
end
class Goto_Nre_36d2
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_re_36d2)
	end
	redef fun goto_sre_36d1(parser) do
		parser.push(state_re_36d1_32dre_36d2)
	end
	redef fun goto_s_39d_40d_39d(parser) do
		parser.push(state_re_36d2)
	end
	redef fun goto_sre_32d_39d_124d_39d(parser) do
		parser.push(state_re_36d2)
	end
	redef fun goto_sre_32d_39d_124d_39d_32dre_36d1(parser) do
		parser.push(state_re_36d1_32dre_36d2)
	end
end
class Goto_Nre_36d1
	super LRGoto
	redef fun goto_sStart(parser) do
		parser.push(state_re_36d1)
	end
	redef fun goto_s_39d_40d_39d(parser) do
		parser.push(state_re_36d1)
	end
	redef fun goto_sre_32d_39d_124d_39d(parser) do
		parser.push(state_re_32d_39d_124d_39d_32dre_36d1)
	end
end
class Goto_N_start
	super LRGoto
end
class Nre
	super NProd
	redef fun node_name do return "re"
end
class Nre_alter
	super Nre
	redef fun node_name do return "re_alter"
	var n_re: Nre
	var n_1: N_39d_124d_39d
	var n_re2: Nre
	init(n_re: Nre, n_1: N_39d_124d_39d, n_re2: Nre) do
		self.n_re = n_re
		self.n_1 = n_1
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_1
		if i == 2 then return n_re2
		abort
	end
end
class Nre_char
	super Nre
	redef fun node_name do return "re_char"
	var n_char: Nchar
	init(n_char: Nchar) do
		self.n_char = n_char
	end
	redef fun number_of_children do return 1
	redef fun child(i) do
		if i == 0 then return n_char
		abort
	end
end
class Nre_par
	super Nre
	redef fun node_name do return "re_par"
	var n_0: N_39d_40d_39d
	var n_re: Nre
	var n_2: N_39d_41d_39d
	init(n_0: N_39d_40d_39d, n_re: Nre, n_2: N_39d_41d_39d) do
		self.n_0 = n_0
		self.n_re = n_re
		self.n_2 = n_2
	end
	redef fun number_of_children do return 3
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_re
		if i == 2 then return n_2
		abort
	end
end
class Nre_ques
	super Nre
	redef fun node_name do return "re_ques"
	var n_re: Nre
	var n_1: N_39d_63d_39d
	init(n_re: Nre, n_1: N_39d_63d_39d) do
		self.n_re = n_re
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_1
		abort
	end
end
class Nre_star
	super Nre
	redef fun node_name do return "re_star"
	var n_re: Nre
	var n_1: N_39d_42d_39d
	init(n_re: Nre, n_1: N_39d_42d_39d) do
		self.n_re = n_re
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_1
		abort
	end
end
class Nre_plus
	super Nre
	redef fun node_name do return "re_plus"
	var n_re: Nre
	var n_1: N_39d_43d_39d
	init(n_re: Nre, n_1: N_39d_43d_39d) do
		self.n_re = n_re
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_1
		abort
	end
end
class Nre_conc
	super Nre
	redef fun node_name do return "re_conc"
	var n_re: Nre
	var n_re2: Nre
	init(n_re: Nre, n_re2: Nre) do
		self.n_re = n_re
		self.n_re2 = n_re2
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_re
		if i == 1 then return n_re2
		abort
	end
end
class N_start
	super NProd
	redef fun node_name do return "_start"
end
class NStart
	super N_start
	redef fun node_name do return "Start"
	var n_0: Nre
	var n_1: NEof
	init(n_0: Nre, n_1: NEof) do
		self.n_0 = n_0
		self.n_1 = n_1
	end
	redef fun number_of_children do return 2
	redef fun child(i) do
		if i == 0 then return n_0
		if i == 1 then return n_1
		abort
	end
end
# State Start
private class LRStateStart
	super LRState
	redef fun to_s do return "Start"
	redef fun error_msg do return "re, re$1, re$2, re$0"
	redef fun action(parser) do
		parser.peek_token.action_sStart(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sStart(parser)
	end
end
# State re
private class LRStatere
	super LRState
	redef fun to_s do return "re"
	redef fun error_msg do return "Eof, \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_sre(parser)
	end
end
# State re$1
private class LRStatere_36d1
	super LRState
	redef fun to_s do return "re$1"
	redef fun error_msg do return "re$2, re$0"
	redef fun action(parser) do
		parser.peek_token.action_sre_36d1(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sre_36d1(parser)
	end
end
# State re$2
private class LRStatere_36d2
	super LRState
	redef fun to_s do return "re$2"
	redef fun error_msg do return "\'?\', \'*\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_sre_36d2(parser)
	end
end
# State re$0
private class LRStatere_36d0
	super LRState
	redef fun to_s do return "re$0"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_36d2_95d3(parser)
	end
end
# State char
private class LRStatechar
	super LRState
	redef fun to_s do return "char"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_char(parser)
	end
end
# State '('
private class LRState_39d_40d_39d
	super LRState
	redef fun to_s do return "\'(\'"
	redef fun error_msg do return "re, re$1, re$2, re$0"
	redef fun action(parser) do
		parser.peek_token.action_s_39d_40d_39d(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_s_39d_40d_39d(parser)
	end
end
# State re Eof
private class LRStatere_32dEof
	super LRState
	redef fun to_s do return "re Eof"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_NStart(parser)
	end
end
# State re '|'
private class LRStatere_32d_39d_124d_39d
	super LRState
	redef fun to_s do return "re \'|\'"
	redef fun error_msg do return "re$1, re$2, re$0"
	redef fun action(parser) do
		parser.peek_token.action_sre_32d_39d_124d_39d(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sre_32d_39d_124d_39d(parser)
	end
end
# State re$1 re$2
private class LRStatere_36d1_32dre_36d2
	super LRState
	redef fun to_s do return "re$1 re$2"
	redef fun error_msg do return "\'?\', \'*\', \'+\'"
	redef fun action(parser) do
		parser.peek_token.action_sre_36d1_32dre_36d2(parser)
	end
end
# State re$2 '?'
private class LRStatere_36d2_32d_39d_63d_39d
	super LRState
	redef fun to_s do return "re$2 \'?\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_ques(parser)
	end
end
# State re$2 '*'
private class LRStatere_36d2_32d_39d_42d_39d
	super LRState
	redef fun to_s do return "re$2 \'*\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_star(parser)
	end
end
# State re$2 '+'
private class LRStatere_36d2_32d_39d_43d_39d
	super LRState
	redef fun to_s do return "re$2 \'+\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_plus(parser)
	end
end
# State '(' re
private class LRState_39d_40d_39d_32dre
	super LRState
	redef fun to_s do return "\'(\' re"
	redef fun error_msg do return "\')\', \'|\'"
	redef fun action(parser) do
		parser.peek_token.action_s_39d_40d_39d_32dre(parser)
	end
end
# State re '|' re$1
private class LRStatere_32d_39d_124d_39d_32dre_36d1
	super LRState
	redef fun to_s do return "re \'|\' re$1"
	redef fun error_msg do return "re$2, re$0"
	redef fun action(parser) do
		parser.peek_token.action_sre_32d_39d_124d_39d_32dre_36d1(parser)
	end
	redef fun goto(parser, goto) do
		goto.goto_sre_32d_39d_124d_39d_32dre_36d1(parser)
	end
end
# State '(' re ')'
private class LRState_39d_40d_39d_32dre_32d_39d_41d_39d
	super LRState
	redef fun to_s do return "\'(\' re \')\'"
	redef fun error_msg do return ""
	redef fun action(parser) do
		reduce_Nre_par(parser)
	end
end
