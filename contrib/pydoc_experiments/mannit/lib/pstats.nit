# Class for printing reports on profiled python code.
module pstats

import sys
import re
import os
import marshal
import time
import builtins

redef class Sys
    
end

# This class is used for creating reports from data generated by the
# Profile class.  It is a "friend" of that class, and imports data either
# by direct access to members of Profile class, or by reading in a dictionary
# that was emitted (via marshal) from the Profile class.
# The big change from the previous Profiler (in terms of raw functionality)
# is that an "add()" method has been provided to combine Stats from
# several distinct profile runs.  Both the constructor and the add()
# method now take arbitrarily many file names as arguments.
# All the print methods now take an argument that indicates how many lines
# to print.  If the arg is a floating point number between 0 and 1.0, then
# it is taken as a decimal percentage of the available lines to be printed
# (e.g., .1 means print 10% of all available lines).  If it is an integer,
# it is taken to mean the number of lines of data that you wish to have
# printed.
# The sort_stats() method now processes some additional options (i.e., in
# addition to the old -1, 0, 1, or 2).  It takes an arbitrary number of
# quoted strings to select the sort order.  For example sort_stats('time',
# 'name') sorts on the major key of 'internal function time', and on the
# minor key of 'the name of the function'.  Look at the two tables in
# sort_stats() and get_sort_arg_defs(self) for more examples.
# All methods return self, so you can string together commands like:
# Stats('foo', 'goo').strip_dirs().sort_stats('calls').                            print_stats(5).print_callers(5)
class Stats
    
    fun reverse_order is abstract
    
    fun print_callers is abstract
    
    fun load_stats(arg: Object) is abstract
    
    fun print_stats is abstract
    
    fun print_title is abstract
    
    fun eval_print_amount(msg, sel, list: Object) is abstract
    
    fun print_line(func: Object) is abstract
    
    # Write the profile data to a file we know how to load back.
    fun dump_stats(filename: Object) is abstract
    
    fun print_call_line(source, call_dict, arrow, name_size: Object) is abstract
    
    # Expand all abbreviations that are unique.
    fun get_sort_arg_defs is abstract
    
    fun get_print_list(sel_list: Object) is abstract
    
    init do end
    
    fun add is abstract
    
    fun print_call_heading(column_title, name_size: Object) is abstract
    
    fun calc_callees is abstract
    
    fun print_callees is abstract
    
    fun get_top_level_stats is abstract
    
    fun sort_stats is abstract
    
    fun strip_dirs is abstract
    
end

# This class provides a generic function for comparing any two tuples.
# Each instance records a list of tuple-indices (from most significant
# to least significant), and sort direction (ascending or decending) for
# each tuple-index.  The compare functions can then be used as the function
# argument to the system sort() function when a list of tuples need to be
# sorted in the instances order.
class TupleComp
    
    fun compare(right, left: Object) is abstract
    
    init do end
    
end

